services:
  # MongoDB sin autenticaci√≥n para desarrollo
  mongodb:
    image: mongo:4.4
    container_name: microblog-mongodb-dev
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=microblog
    volumes:
      - mongodb_data_dev:/data/db
      - ./docker/mongo-init-dev.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - microblog-network
    restart: unless-stopped
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/microblog --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # RabbitMQ para desarrollo
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: microblog-rabbitmq-dev
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=password123
      - RABBITMQ_DEFAULT_VHOST=/
    volumes:
      - rabbitmq_data_dev:/var/lib/rabbitmq
      - ./docker/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - microblog-network
    restart: unless-stopped
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis para desarrollo
  redis:
    image: redis:7.2-alpine
    container_name: microblog-redis-dev
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass password123
    volumes:
      - redis_data_dev:/data
    networks:
      - microblog-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "password123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  microblog-network:
    driver: bridge
    name: microblog-network

volumes:
  mongodb_data_dev:
    driver: local
  rabbitmq_data_dev:
    driver: local
  redis_data_dev:
    driver: local 